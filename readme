# Products Admin Panel

A complete product management system with GitHub integration, deployed on Vercel.

## üöÄ Features

- **Main Store Page**: Display products from GitHub repository
- **Admin Panel**: Add, edit, and delete products
- **GitHub Integration**: Automatically commits changes to your repository
- **Responsive Design**: Works on desktop and mobile
- **Real-time Updates**: Changes are immediately reflected

## üìÅ Project Structure

```
your-repo/
‚îú‚îÄ‚îÄ index.html          # Main products display page
‚îú‚îÄ‚îÄ admin.html          # Admin panel for managing products
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îî‚îÄ‚îÄ update-json.js  # Vercel serverless function
‚îú‚îÄ‚îÄ data.json           # Products data (auto-generated)
‚îî‚îÄ‚îÄ README.md           # This file
```

## üõ†Ô∏è Setup Instructions

### 1. GitHub Repository Setup

1. Create a new GitHub repository or use an existing one
2. Upload these files to your repository:
   - `index.html`
   - `admin.html` 
   - `api/update-json.js`
   - `data.json` (optional - will be created automatically)

### 2. Create GitHub Personal Access Token

1. Go to GitHub Settings ‚Üí Developer settings ‚Üí Personal access tokens ‚Üí Tokens (classic)
2. Click "Generate new token (classic)"
3. Give it a descriptive name like "Products Admin Panel"
4. Select the following scopes:
   - `repo` (Full control of private repositories)
   - `public_repo` (Access public repositories)
5. Click "Generate token"
6. **IMPORTANT**: Copy the token immediately (you won't see it again)

### 3. Deploy to Vercel

1. Go to [vercel.com](https://vercel.com) and sign up/login
2. Click "New Project"
3. Import your GitHub repository
4. Configure the project:
   - Framework Preset: "Other"
   - Root Directory: `./` (default)
   - Build Command: (leave empty)
   - Output Directory: (leave empty)

### 4. Configure Environment Variables in Vercel

**This is the most important step!**

1. In your Vercel project dashboard, go to **Settings** ‚Üí **Environment Variables**
2. Add the following environment variables:

| Variable Name | Value | Description |
|---------------|-------|-------------|
| `GITHUB_TOKEN` | `your_token_here` | The personal access token from step 2 |
| `GITHUB_USERNAME` | `your-username` | Your GitHub username |
| `GITHUB_REPO` | `your-repo-name` | Your repository name |
| `GITHUB_BRANCH` | `main` | Branch name (usually 'main' or 'master') |

**Example:**
- `GITHUB_TOKEN`: `ghp_xxxxxxxxxxxxxxxxxxxx`
- `GITHUB_USERNAME`: `johndoe`
- `GITHUB_REPO`: `my-products-store`
- `GITHUB_BRANCH`: `main`

### 5. Update Configuration in Files

Edit the following files and update the GitHub configuration:

**In `index.html`** (around line 125):
```javascript
const GITHUB_USERNAME = 'your-username'; // Replace with your GitHub username
const GITHUB_REPO = 'your-repo-name';    // Replace with your repository name
const GITHUB_BRANCH = 'main';            // Replace with your branch name
```

**In `admin.html`** (around line 235):
```javascript
const GITHUB_USERNAME = 'your-username'; // Update this
const GITHUB_REPO = 'your-repo-name';    // Update this
const GITHUB_BRANCH = 'main';            // Update this
```

### 6. Deploy and Test

1. Commit and push your changes to GitHub
2. Vercel will automatically redeploy
3. **Main site**: Visit your Vercel URL (e.g., `https://your-project.vercel.app`)
4. **Admin panel**: Go directly to `https://your-project.vercel.app/admin.html`
5. Enter your admin password to access the management panel

## üîß How It Works

### Main Flow
1. **Display Products**: `index.html` fetches `data.json` directly from GitHub
2. **Admin Panel**: `admin.html` provides interface to manage products
3. **API Endpoint**: `/api/update-json` commits changes to GitHub
4. **Auto-sync**: Changes appear immediately on the main site

### API Endpoint Details
- **URL**: `/api/update-json`
- **Method**: `POST`
- **Body**: `{ "newData": { "products": [...], "lastUpdated": "..." } }`
- **Response**: `{ "success": true, "message": "...", "commit": {...} }`

## üé® Customization

### Styling
Both HTML files include embedded CSS that you can modify:
- Change colors in the CSS gradient backgrounds
- Modify the card styles and animations
- Update fonts and spacing

### Product Fields
To add more product fields (e.g., images, categories):

1. Update the form in `admin.html`
2. Modify the product display in `index.html`
3. Update the data structure in both files

### GitHub Integration
The system automatically:
- Creates `data.json` if it doesn't exist
- Updates existing `data.json` with new content
- Commits changes with timestamp messages
- Handles concurrent edits safely

## üö® Troubleshooting

### Common Issues

**"GITHUB_TOKEN environment variable is not set"**
- Ensure you've set the environment variable in Vercel
- Check the variable name is exactly `GITHUB_TOKEN`
- Redeploy after adding environment variables

**"Products not loading"**
- Check that your GitHub username, repo name, and branch are correct
- Ensure the repository is public or the token has correct permissions
- Check browser console for network errors

**"Failed to update products"**
- Verify your GitHub token has `repo` permissions
- Check that the repository exists and is accessible
- Ensure the branch name is correct

**"Function timeout"**
- This usually indicates a GitHub API issue
- Check GitHub's status page
- Verify your token is still valid

### Testing the API Directly

You can test the serverless function with curl:

```bash
curl -X POST https://your-project.vercel.app/api/update-json \
  -H "Content-Type: application/json" \
  -d '{"newData":{"products":[{"name":"Test Product","price":"$10"}],"lastUpdated":"2025-01-15T10:30:00.000Z"}}'
```

## üîí Security Notes

- GitHub tokens are stored securely in Vercel environment variables
- The API endpoint has CORS headers for browser access
- All user input is properly escaped to prevent XSS
- GitHub API handles authentication and authorization

## üìù License

This project is open source and available under the MIT License.

## ü§ù Contributing

Feel free to submit issues, fork the repository, and create pull requests for any improvements.

---

**Need help?** Check the troubleshooting section above or create an issue in the repository.